<snippet>
	<content><![CDATA[
#define vi vector<int>
#define sz(v) int((v).size())
vector<vi> matmul(vector<vi> A, vector<vi> B) {
    int n = sz(A), m = sz(A[0]), p = sz(B[0]);
    assert(sz(B) == m);
    vector<vi> C(n, vi(p, 0));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < p; j++)
            for (int k = 0; k < m; k++)
                C[i][j] += A[i][k] * B[k][j];
    return C;
}
vector<vi> matexp(vector<vi> A, int k) {
    int n = A.size();
    assert(sz(A[0]) == n);
    vector<vi> C(n, vi(n, 0));
    for (int i = 0; i < n; i++) C[i][i]++;
    while (k) {
        if (k & 1) C = matmul(C, A);
        A = matmul(A, A); k >>= 1;
    }
    return C;
}
void matprint(vector<vi> A) {
    for (int i = 0; i < A.size(); i++) {
        for (int j = 0; j < A[i].size(); j++)
            cout << A[i][j] << " ";
        cout << endl;
    }
}
vector<vi> matadd(vector<vi> A, vector<vi> B) {
    int n = sz(A), m = sz(A[0]);
    assert(sz(B) == n); assert(sz(B[0]) == m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            A[i][j] += B[i][j];
    return A;
}
vector<vi> matsub(vector<vi> A, vector<vi> B) {
    int n = sz(A), m = sz(A[0]);
    assert(sz(B) == n); assert(sz(B[0]) == m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            A[i][j] -= B[i][j];
    return A;
}
vector<vi> matmults(vector<vi> A, int k) {
    for (int i = 0; i < A.size(); i++)
        for (int j = 0; j < A[i].size(); j++)
            A[i][j] *= k;
    return A;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrix</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
