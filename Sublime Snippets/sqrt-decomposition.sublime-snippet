<snippet>
	<content><![CDATA[
struct decomp {
    vector<int> state, block, sums;
    int n, rt;
    decomp(int m) {
        n = m;
        rt = sqrtl(n) + 1;
        block.assign(rt + 1, 0);
        sums.assign(rt + 1, 0);
        state.assign(n, 0);
    }
    void update(int i, int j) {
        if (i > j) return;
        if (i < 0) return update(0, j);
        if (j >= n) return update(i, n - 1);
        int ri = i / rt, rj = j / rt;
        if (ri == rj) {
            for (int it = i; it <= j; it++) {
                state[it] = 1 - state[it];
                int ch = 2 * state[it] - 1;
                sums[ri] += block[ri] ? -ch : ch;
            }
            return;
        }
        for (int it = ++ri; it < rj; it++) {
            sums[it] = rt - sums[it];
            block[it] = 1 - block[it];
        }
        update(i, ri * rt - 1);
        update(rj * rt, j);
    }
    int query(int i, int j) {
        if (i > j) return 0;
        if (i < 0) return query(0, j);
        if (j >= n) return query(i, n - 1);
        int ri = i / rt, rj = j / rt;
        int ans = 0;
        if (ri == rj) {
            for (int it = i; it <= j; it++)
                ans += block[ri] ? (1 - state[it]) : state[it];
            return ans;
        }
        for (int it = ++ri; it < rj; it++)
            ans += sums[it];
        ans += query(i, ri * rt - 1);
        ans += query(rj * rt, j);
        return ans;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sqrtdec</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
