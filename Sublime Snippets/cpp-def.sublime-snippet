<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef double db;
typedef string str;

typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;

typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<ld> vd;
typedef vector<str> vs;
typedef vector<pl> vpl;

#define forn(i, a, b) for (int i = a; i < b; i++)
#define rfor(i, b, a) for (int i = b; i > a; i--)
#define rep(i, n) for (int i = 0; i < n; i++)
#define repr(i, n) for (int i = n - 1; i >= 0; i--)
#define forv(i, v) for (auto& i : v)

#define all(v) v.begin(), v.end()
#define sz(v) (int)v.size()
#define rall(v) v.rbegin(), v.rend()

#define popcnt __builtin_popcount
#define popcntll __builtin_popcountll
#define ctz __builtin_ctz
#define ctzll __builtin_ctzll
#define gcd __gcd

#define fi first
#define se second
#define pb push_back
#define pf push_front
#define ef emplace_front
#define eb emplace_back
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define rsz resize
#define ins insert
#define endl "\n"

#define Set(n, i) n = n | (1LL << i)
#define Reset(n, i) n = n & ~(1LL << i)
#define Test(n, i) (n >> i & 1LL)
#define par(n) n & 1LL

template <typename T>
inline T maxm(T v) { return v;}
template <typename T, typename... Types>
inline T maxm(T v, Types... u) {return max(v, maxm(u...));}

template <typename T>
inline T minm(T v) { return v;}
template <typename T, typename... Types>
inline T minm(T v, Types... u) {return min(v, minm(u...));}

template <typename T>
inline void print(T v) { cout << v << "\n";}
template <typename T, typename... Types>
inline void print(T v, Types... u) {cout << v << " " ; print(u...) ;}

template <typename T>
inline void read(T &x) {
	bool neg = false; register T c; x = 0;
	c = getchar_unlocked();
	if (c == '-') {neg = true; c = getchar_unlocked();}
	for (; (c > 47 && c < 58); c = getchar_unlocked())
		x = (x << 1) + (x << 3) + c - 48;
	if (neg) x *= -1;
}
const int N = 1e9 + 7;
const int mod = 998244353;

int main() {

	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
